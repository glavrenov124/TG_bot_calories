import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.dispatcher.router import Router
from middleware import LoggingMiddleware
from storage import (
    get_user,
    set_user,
    add_water,
    add_food_calories,
    add_burned_calories,
    delete_user
)
import utils
from keyboards import get_main_menu

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–æ–¥–µ, –∫–∞–ª–æ—Ä–∏—è–º –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ /log_water <–∫–æ–ª-–≤–æ> - –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n"
        "‚Ä¢ /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏\n"
        "‚Ä¢ /log_workout <—Ç–∏–ø> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "‚Ä¢ /check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ /delete_profile - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        "–¢–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–¥–æ–±–Ω—ã–º –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(greeting, reply_markup=get_main_menu())

class SetProfile(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    calorie_goal = State()

@router.message(Command("set_profile"))
async def cmd_set_profile(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(SetProfile.weight)

@router.message(SetProfile.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")
        return
    await state.update_data(weight=weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(SetProfile.height)

@router.message(SetProfile.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")
        return
    await state.update_data(height=height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(SetProfile.age)

@router.message(SetProfile.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return
    await state.update_data(age=age)
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(SetProfile.activity)

@router.message(SetProfile.activity)
async def process_activity(message: types.Message, state: FSMContext):
    try:
        activity = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return
    await state.update_data(activity=activity)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(SetProfile.city)

@router.message(SetProfile.city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–∞–≤—Ç–æ' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞:")
    await state.set_state(SetProfile.calorie_goal)

@router.message(SetProfile.calorie_goal)
async def process_calorie_goal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        if message.text.lower() == "–∞–≤—Ç–æ":
            manual_goal = None
        else:
            manual_goal = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–∞–≤—Ç–æ'.")
        return

    weight = data.get("weight")
    height = data.get("height")
    age = data.get("age")
    activity = data.get("activity")
    city = data.get("city")

    temperature = await utils.get_city_temperature(city)
    if temperature is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–æ—Ä–º—É.")
        temperature = 20

    water_goal = utils.calculate_water_goal(weight, activity, temperature)
    calorie_goal = utils.calculate_calorie_goal(weight, height, age, activity, manual_goal)

    user_data = {
        "weight": weight,
        "height": height,
        "age": age,
        "activity": activity,
        "city": city,
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }
    set_user(message.from_user.id, user_data)

    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
        f"–í–µ—Å: {weight} –∫–≥, –†–æ—Å—Ç: {height} —Å–º, –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity} –º–∏–Ω/–¥–µ–Ω—å, –ì–æ—Ä–æ–¥: {city}\n"
        f"–¶–µ–ª—å –≤–æ–¥—ã: {water_goal} –º–ª, –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª.",
        reply_markup=get_main_menu()
    )
    await state.clear()

class LogFood(StatesGroup):
    waiting_for_product = State()
    waiting_for_grams = State()

@router.message(Command("log_food"))
async def cmd_log_food(message: types.Message, command: CommandObject, state: FSMContext):
    if command.args:
        product_name = command.args.strip()
        product_info = await utils.get_food_info(product_name)
        if product_info is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
            return
        await state.update_data(
            product_name=product_info.get("product_name", product_name),
            calories_per_100g=product_info["calories_per_100g"]
        )
        await message.answer(
            f"üçΩ {product_info.get('product_name', product_name)} ‚Äî {product_info['calories_per_100g']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
            "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
        await state.set_state(LogFood.waiting_for_grams)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞–Ω–∞–Ω):")
        await state.set_state(LogFood.waiting_for_product)

@router.message(LogFood.waiting_for_product)
async def process_food_product(message: types.Message, state: FSMContext):
    product_name = message.text.strip()
    product_info = await utils.get_food_info(product_name)
    if product_info is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(
        product_name=product_info.get("product_name", product_name),
        calories_per_100g=product_info["calories_per_100g"]
    )
    await message.answer(
        f"üçΩ {product_info.get('product_name', product_name)} ‚Äî {product_info['calories_per_100g']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
        "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
    )
    await state.set_state(LogFood.waiting_for_grams)

@router.message(LogFood.waiting_for_grams)
async def process_food_grams(message: types.Message, state: FSMContext):
    try:
        grams = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≥—Ä–∞–º–º–æ–≤.")
        return
    data = await state.get_data()
    calories_per_100g = data.get("calories_per_100g")
    product_name = data.get("product_name")
    total_calories = utils.calculate_food_calories(calories_per_100g, grams)
    add_food_calories(message.from_user.id, total_calories)
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}.")
    await state.clear()

class LogWater(StatesGroup):
    waiting_for_amount = State()

@router.message(Command("log_water"))
async def cmd_log_water(message: types.Message, command: CommandObject, state: FSMContext):
    if command.args:
        try:
            amount = int(command.args.strip())
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        user = get_user(message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
            return
        add_water(message.from_user.id, amount)
        user = get_user(message.from_user.id)
        water_goal = user.get("water_goal", 0)
        logged = user.get("logged_water", 0)
        remaining = water_goal - logged if water_goal > logged else 0
        await message.answer(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã.\n"
            f"–í—ã–ø–∏—Ç–æ: {logged} –º–ª –∏–∑ {water_goal} –º–ª.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª."
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª. (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):")
        await state.set_state(LogWater.waiting_for_amount)

@router.message(LogWater.waiting_for_amount)
async def process_log_water_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        await state.clear()
        return
    add_water(message.from_user.id, amount)
    user = get_user(message.from_user.id)
    water_goal = user.get("water_goal", 0)
    logged = user.get("logged_water", 0)
    remaining = water_goal - logged if water_goal > logged else 0
    await message.answer(
        f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã.\n"
        f"–í—ã–ø–∏—Ç–æ: {logged} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª."
    )
    await state.clear()

class LogWorkout(StatesGroup):
    waiting_for_input = State()

@router.message(Command("log_workout"))
async def cmd_log_workout(message: types.Message, command: CommandObject, state: FSMContext):
    if command.args:
        parts = command.args.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>\n–ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
            return
        workout_type = parts[0]
        try:
            minutes = int(parts[1])
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
            return
        stats = utils.calculate_workout_stats(workout_type, minutes)
        add_burned_calories(message.from_user.id, stats["burned_calories"])
        await message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {minutes} –º–∏–Ω—É—Ç ‚Äî {stats['burned_calories']} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {stats['water_recommendation']} –º–ª –≤–æ–¥—ã."
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–≥ 30):")
        await state.set_state(LogWorkout.waiting_for_input)

@router.message(LogWorkout.waiting_for_input)
async def process_log_workout_input(message: types.Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–≥ 30).")
        return
    workout_type = parts[0]
    try:
        minutes = int(parts[1])
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return
    stats = utils.calculate_workout_stats(workout_type, minutes)
    add_burned_calories(message.from_user.id, stats["burned_calories"])
    await message.answer(
        f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {minutes} –º–∏–Ω—É—Ç ‚Äî {stats['burned_calories']} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {stats['water_recommendation']} –º–ª –≤–æ–¥—ã."
    )
    await state.clear()

@router.message(Command("check_progress"))
async def cmd_check_progress(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return
    water_goal = user.get("water_goal", 0)
    logged_water = user.get("logged_water", 0)
    remaining_water = water_goal - logged_water if water_goal > logged_water else 0
    calorie_goal = user.get("calorie_goal", 0)
    logged_calories = user.get("logged_calories", 0)
    burned_calories = user.get("burned_calories", 0)
    balance = calorie_goal - (logged_calories - burned_calories)
    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"–í–æ–¥–∞:\n- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n- –ë–∞–ª–∞–Ω—Å: {balance} –∫–∫–∞–ª."
    )

@router.message(Command("delete_profile"))
async def cmd_delete_profile(message: types.Message, command: CommandObject = None):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    delete_user(message.from_user.id)
    await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã.")

@router.callback_query(lambda c: c.data == "set_profile")
async def cb_set_profile(callback: types.CallbackQuery, state: FSMContext):
    await cmd_set_profile(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "check_progress")
async def cb_check_progress(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
    else:
        water_goal = user.get("water_goal", 0)
        logged_water = user.get("logged_water", 0)
        remaining_water = water_goal - logged_water if water_goal > logged_water else 0
        calorie_goal = user.get("calorie_goal", 0)
        logged_calories = user.get("logged_calories", 0)
        burned_calories = user.get("burned_calories", 0)
        balance = calorie_goal - (logged_calories - burned_calories)
        progress_text = (
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            f"–í–æ–¥–∞:\n- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n\n"
            f"–ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
            f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n- –ë–∞–ª–∞–Ω—Å: {balance} –∫–∫–∞–ª."
        )
        await callback.message.answer(progress_text)
    await callback.answer()

@router.callback_query(lambda c: c.data == "delete_profile")
async def cb_delete_profile(callback: types.CallbackQuery):
    await cmd_delete_profile(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "log_water")
async def cb_log_water(callback: types.CallbackQuery, state: FSMContext):
    await cmd_log_water(callback.message, CommandObject(args=""), state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "log_food")
async def cb_log_food(callback: types.CallbackQuery, state: FSMContext):
    await cmd_log_food(callback.message, CommandObject(args=""), state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "log_workout")
async def cb_log_workout(callback: types.CallbackQuery, state: FSMContext):
    await cmd_log_workout(callback.message, CommandObject(args=""), state)
    await callback.answer()

async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="set_profile", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand(command="log_water", description="–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É"),
        types.BotCommand(command="log_food", description="–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏"),
        types.BotCommand(command="log_workout", description="–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
        types.BotCommand(command="check_progress", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        types.BotCommand(command="delete_profile", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
    ]
    await bot.set_my_commands(commands)


async def main():
    API_TOKEN = "YOUR_API_TOKEN"  
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    dp.message.middleware.register(LoggingMiddleware())
    dp.include_router(router)
    
    await set_commands(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞—é polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
